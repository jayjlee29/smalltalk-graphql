type Query {
    greeting: String
    greetingMono : String
    greetingsFlux : [String]
}

type Subscription {
    subscribe(topic: String): String
    stream: String
}

type Mutation {
    publish(topic: String, message: String ): Int
    createArticle(input: ArticleCreateRequest): TenwellResponse
    createBoard(input: BoardCreateRequest): TenwellResponse
}


input BoardCreateRequest {
    name: String
    description: String
    enabled: Boolean
}

input ArticleCreateRequest {
    boardId: String
    title: String
    contents: String
    author: String
    tags: [String]
}


union ResponseData = BooleanWrapper | Article | Board

type BooleanWrapper {
    value: Boolean
}


type TenwellResponse {
    code: Int
    data: ResponseData
    message: String
}

type Article {
    id: ID
    boardId: String!
    title: String!
    contents: String!
    author: String!
    tags: [String]
    createdBy: String
    updatedBy: String
}

type Board {
    id: ID
    name: String
    description: String
    deleted: Boolean
    enabled: Boolean
    createdBy: String
    updatedBy: String
}